[{"E:\\dec-exp\\src\\index.js":"1","E:\\dec-exp\\src\\reportWebVitals.js":"2","E:\\dec-exp\\src\\containers\\App.js":"3","E:\\dec-exp\\src\\components\\Navigation\\Navigation.js":"4","E:\\dec-exp\\src\\components\\Logo\\Logo.js":"5","E:\\dec-exp\\src\\containers\\Header\\Header.js":"6","E:\\dec-exp\\src\\store\\reducers\\reducer_location.js":"7","E:\\dec-exp\\src\\store\\actions\\actionTypes.js":"8","E:\\dec-exp\\src\\store\\actions\\index.js":"9","E:\\dec-exp\\src\\components\\Categories\\Categories.js":"10","E:\\dec-exp\\src\\UI\\Backdrop\\Backdrop.js":"11","E:\\dec-exp\\src\\components\\Card\\Card.js":"12","E:\\dec-exp\\src\\components\\Footer.js\\Footer.js":"13","E:\\dec-exp\\src\\components\\Language\\Language.js":"14","E:\\dec-exp\\src\\components\\Searchbar\\Searchbar.js":"15","E:\\dec-exp\\src\\hoc\\asyncComponent\\asyncComponent.js":"16","E:\\dec-exp\\src\\components\\Authorization\\AuthSignup.js":"17","E:\\dec-exp\\src\\components\\Authorization\\AuthSignin.js":"18","E:\\dec-exp\\src\\components\\Dropdown\\Dropdown.js":"19","E:\\dec-exp\\src\\components\\Authorization\\ResetPass.js":"20","E:\\dec-exp\\src\\components\\Filter\\Filter.js":"21","E:\\dec-exp\\src\\store\\reducers\\reducer_data.js":"22","E:\\dec-exp\\src\\store\\Filters\\for_kids.js":"23","E:\\dec-exp\\src\\store\\Categories\\categories.js":"24","E:\\dec-exp\\src\\store\\actions\\actions_location.js":"25","E:\\dec-exp\\src\\store\\reducers\\reducer__filter.js":"26","E:\\dec-exp\\src\\store\\actions\\actions_filter.js":"27","E:\\dec-exp\\src\\store\\actions\\actions_data.js":"28","E:\\dec-exp\\src\\utilities\\utilities.js":"29","E:\\dec-exp\\src\\components\\Tooltip\\Tooltip.js":"30","E:\\dec-exp\\src\\containers\\Adview\\Adview.js":"31","E:\\dec-exp\\src\\containers\\Main\\Main.js":"32"},{"size":1243,"mtime":1609050198914,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1610,"mtime":1609263541683,"results":"36","hashOfConfig":"34"},{"size":7670,"mtime":1609351608050,"results":"37","hashOfConfig":"34"},{"size":395,"mtime":1608895329355,"results":"38","hashOfConfig":"34"},{"size":2855,"mtime":1609262954796,"results":"39","hashOfConfig":"34"},{"size":764,"mtime":1608902289310,"results":"40","hashOfConfig":"34"},{"size":652,"mtime":1609096193849,"results":"41","hashOfConfig":"34"},{"size":393,"mtime":1609096213510,"results":"42","hashOfConfig":"34"},{"size":5895,"mtime":1609178927078,"results":"43","hashOfConfig":"34"},{"size":286,"mtime":1609092092790,"results":"44","hashOfConfig":"34"},{"size":1829,"mtime":1609268001746,"results":"45","hashOfConfig":"34"},{"size":2269,"mtime":1609179238626,"results":"46","hashOfConfig":"34"},{"size":1597,"mtime":1608828572745,"results":"47","hashOfConfig":"34"},{"size":4544,"mtime":1609178384001,"results":"48","hashOfConfig":"34"},{"size":549,"mtime":1609011609885,"results":"49","hashOfConfig":"34"},{"size":2947,"mtime":1609011708548,"results":"50","hashOfConfig":"34"},{"size":2813,"mtime":1609012071429,"results":"51","hashOfConfig":"34"},{"size":196,"mtime":1608835121804,"results":"52","hashOfConfig":"34"},{"size":3220,"mtime":1609011872343,"results":"53","hashOfConfig":"34"},{"size":12471,"mtime":1609314210006,"results":"54","hashOfConfig":"34"},{"size":3435,"mtime":1609324884084,"results":"55","hashOfConfig":"34"},{"size":3405,"mtime":1609075991734,"results":"56","hashOfConfig":"34"},{"size":3269,"mtime":1609010222514,"results":"57","hashOfConfig":"34"},{"size":439,"mtime":1609047572479,"results":"58","hashOfConfig":"34"},{"size":2396,"mtime":1609096189866,"results":"59","hashOfConfig":"34"},{"size":1238,"mtime":1609096193850,"results":"60","hashOfConfig":"34"},{"size":183,"mtime":1609047579103,"results":"61","hashOfConfig":"34"},{"size":838,"mtime":1609180269324,"results":"62","hashOfConfig":"34"},{"size":218,"mtime":1609236433319,"results":"63","hashOfConfig":"34"},{"size":17001,"mtime":1609348050623,"results":"64","hashOfConfig":"34"},{"size":2043,"mtime":1609324178500,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},"ta4lz8",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"69"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"69"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"E:\\dec-exp\\src\\index.js",["138"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport localization from './store/reducers/reducer_location';\nimport data from './store/reducers/reducer_data';\nimport filters from './store/reducers/reducer__filter';\n\nimport App from './containers/App';\nimport './index.scss';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  localization,\n  data,\n  filters\n});\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["139","140"],"E:\\dec-exp\\src\\reportWebVitals.js",[],"E:\\dec-exp\\src\\containers\\App.js",[],"E:\\dec-exp\\src\\components\\Navigation\\Navigation.js",["141","142","143","144","145"],"E:\\dec-exp\\src\\components\\Logo\\Logo.js",[],"E:\\dec-exp\\src\\containers\\Header\\Header.js",["146"],"import React, { Component } from 'react';\r\n\r\nimport SwiperCore, { Autoplay, Navigation, Pagination } from 'swiper'; \r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n\r\nimport 'swiper/swiper.scss'\r\nimport 'swiper/components/pagination/pagination.scss'\r\n\r\nimport './Header.scss';\r\nimport sprite from '../../assets/icons/sprite.svg';\r\nimport Categories from '../../components/Categories/Categories';\r\n\r\nimport car from '../../assets/images/devon-janse-van-rensburg-xJhma-g2cnA-unsplash-compressed (3).jpg';\r\nimport int from '../../assets/images/jonathan-wolf-7sKmRRNH_1Y-unsplash-compressed.jpg';\r\nimport int2 from '../../assets/images/taisiia-shestopal-wXwZyBhGSAc-unsplash-compressed.jpg';\r\n\r\nSwiperCore.use([Autoplay, Navigation, Pagination]);\r\n\r\nconst use = (svg) => `<use xlink:href=\"${sprite}#${svg}\"></use>`;\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        ads: [\r\n            { title: 'Discover Everything', img: car },\r\n            { title: 'Discover Everything', img: int },\r\n            { title: 'Discover Everything', img: int2 }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const ads = this.state.ads.map((el, i) => {\r\n            return (\r\n                <SwiperSlide className=\"Header__item\" key={i}>\r\n                    <img className=\"Header__img\" src={el.img}/>\r\n                    <h1 className=\"Header__heading\">{el.title}</h1>\r\n                </SwiperSlide>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <header className=\"Header\">\r\n                <div className=\"container\">\r\n                    <div className=\"Header__wrapper\">\r\n                        <Categories />\r\n                        <Swiper \r\n                            className=\"Header__list gradient gradient--right\"\r\n                            autoplay={{ delay: 3000, disableOnInteraction: false, waitForTransition: true }}\r\n                            navigation={{ prevEl: '.btn__rounded--left', nextEl: '.btn__rounded--right', disabledClass: 'btn__rounded--disabled' }}\r\n                            pagination={{el: '.swiper-pagination', clickable: true}}>\r\n                            {ads}\r\n                            <button className=\"btn btn__rounded btn__rounded--left\">\r\n                                <svg className=\"Header__icon\" dangerouslySetInnerHTML={{__html: use('chevron-left')}} />\r\n                            </button>\r\n                            <button className=\"btn btn__rounded btn__rounded--right\">\r\n                                <svg className=\"Header__icon\" dangerouslySetInnerHTML={{__html: use('chevron-right')}} />\r\n                            </button>\r\n                            <div className=\"swiper-pagination\"></div>\r\n                        </Swiper>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default React.memo(Header);","E:\\dec-exp\\src\\store\\reducers\\reducer_location.js",[],"E:\\dec-exp\\src\\store\\actions\\actionTypes.js",[],"E:\\dec-exp\\src\\store\\actions\\index.js",[],"E:\\dec-exp\\src\\components\\Categories\\Categories.js",[],"E:\\dec-exp\\src\\UI\\Backdrop\\Backdrop.js",[],"E:\\dec-exp\\src\\components\\Card\\Card.js",[],"E:\\dec-exp\\src\\components\\Footer.js\\Footer.js",["147"],"import React from 'react';\r\n\r\nimport './Footer.scss';\r\nimport Logo from '../Logo/Logo';\r\nimport Language from '../Language/Language';\r\n\r\nimport * as utils from '../../utilities/utilities';\r\n\r\nconst Footer = props => {\r\n\r\n    const year = new Date().getFullYear();\r\n\r\n    const navs = ['Help', 'Enterprise Adverts', 'Terms of use', 'Privacy Policy', 'SBUY Guide', 'Security measures', 'Site map', 'Map of regions', 'Career', 'Feedback'];\r\n\r\n    const navItems = navs.map((el, i) => {\r\n        return (\r\n            <li className=\"Footer__item\" key={i}>\r\n                <a href=\"#\" className=\"Footer__link\">{el}</a>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <footer className=\"Footer\">\r\n            <div className=\"Footer__head\">\r\n                <div className=\"container\">\r\n                    <div className=\"Footer__headwrap\">\r\n                        <div className=\"Navigation__item\">\r\n                            <svg className=\"Footer__icon\" dangerouslySetInnerHTML={{__html: utils.use('home')}} />\r\n                            <h5 className=\"Footer__heading\">Home</h5>\r\n                        </div>\r\n                        <Language class=\"Navigation__item\" dropClass=\"Dropdown--right-fix\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"Footer__wrapper\">\r\n                    <div className=\"Footer__body\">\r\n                        <div div className=\"Footer__group\">\r\n                            <Logo class=\"Footer__logo\" />\r\n                            <ul className=\"Footer__list\">\r\n                                {navItems}\r\n                            </ul>\r\n                            <p className=\"Footer__info\">\r\n                                For all questions, you can contact us<br/> at any convenient time by phone or email<br/>\r\n                                +998 (71) 240-60-50 <br/>\r\n                                sbuy@retail.uz\r\n                            </p>\r\n                        </div>\r\n                        <p className=\"Footer__info\">{year} SBUY&copy;</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default React.memo(Footer);","E:\\dec-exp\\src\\components\\Language\\Language.js",["148"],"import { connect } from 'react-redux';\r\n\r\nimport * as actions from '../../store/actions';\r\n\r\nimport sprite from '../../assets/icons/sprite.svg';\r\nconst use = (svg) => `<use xlink:href=\"${sprite}#${svg}\"></use>`;\r\n\r\nconst Language = (props) => {\r\n\r\n    const langs = ['O\\'zbekcha', 'English', 'Русский'];\r\n\r\n    const langItems = langs.map((el, i) => {\r\n        return (\r\n            <div className=\"Dropdown__item\" key={i} onClick={() => props.onChangeLanguage(el)}>\r\n                <div className=\"Dropdown__link\">{el}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={`Language ${props.class ? props.class : ''}`}>\r\n            <svg className=\"Navigation__icon\" dangerouslySetInnerHTML={{__html: use('globe')}} />\r\n            <span className=\"Navigation__title\">{props.lang}</span>\r\n            <svg className=\"Navigation__icon Navigation__icon--arrow\" dangerouslySetInnerHTML={{__html: use('chevron-down')}} />\r\n            <div className={`Dropdown ${props.dropClass ? props.dropClass : ''}`}>\r\n                <p className=\"Dropdown__title\">Language:</p>\r\n                {langItems}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        lang: state.localization.lang\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangeLanguage: (lang) => dispatch(actions.changeLanguage(lang)),\r\n        onChangeLocation: (loc) => dispatch(actions.changeLocation(loc))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Language);","E:\\dec-exp\\src\\components\\Searchbar\\Searchbar.js",["149"],"import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from '../../store/actions';\r\nimport Logo from '../../components/Logo/Logo';\r\n\r\nimport * as utils from '../../utilities/utilities';\r\n\r\nimport sprite from '../../assets/icons/sprite.svg';\r\nimport './Searchbar.scss';\r\nimport Dropdown from '../Dropdown/Dropdown';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\n\r\n\r\nclass Searchbar extends PureComponent {\r\n    state = {\r\n        locations: ['Whole country', 'Andijan', 'Bukhara', 'Jizzakh', 'Kashkadarya', 'Navoi', 'Namangan', 'Samarkand', 'Surkhandarya', 'Sirdarya', 'Tashkent region', 'Fergana', 'Khorezm', 'Karakalpakistan', 'Tashkent'],\r\n        showDrop: false\r\n    }\r\n    \r\n    onClick = () => this.setState({ showDrop: true });\r\n    onClickOutside = () => this.setState({ showDrop: false });\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSearchLocation = (location) => {\r\n        this.props.onChangeSearchLoc(location);\r\n        this.onClickOutside();\r\n    }\r\n\r\n    clearInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.onChangeSearchInput('');\r\n    }\r\n\r\n    render() {\r\n        const dropClass = ['Dropdown--right--fix Dropdown--full Dropdown--pad'];\r\n        if (this.state.showDrop) dropClass.push('Dropdown--show');\r\n\r\n        const locations = this.state.locations.map((el, i) => {\r\n            return (\r\n                <li className=\"Dropdown__item Dropdown__item--float\" key={i} onClick={() => this.changeSearchLocation(el)}>{el}</li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"Searchbar\">\r\n                <div className=\"container\">\r\n                    <div className=\"Searchbar__wrapper\">\r\n                        <Logo class=\"Searchbar__logo\" />\r\n                        {this.state.showDrop && <Backdrop z={1} click={this.onClickOutside} />}\r\n                        <form className=\"Searchbar__form\" onSubmit={(event) => this.onSubmit(event)}>\r\n                            <label className=\"Searchbar__label\" for=\"search\">\r\n                                <input \r\n                                    className=\"Searchbar__input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search\"\r\n                                    id=\"search\"\r\n                                    onChange={(ev) => this.props.onChangeSearchInput(ev.target.value)}\r\n                                    value={this.props.search} />\r\n                                <button className=\"Searchbar__btn Searchbar__btn--map Searchbar__btn--clear\" onClick={(e) => this.clearInput(e)} >\r\n                                    <svg className=\"Searchbar__icon Searchbar__icon--map Searchbar__icon--clear\" dangerouslySetInnerHTML={{__html: utils.use('x')}} />\r\n                                </button>\r\n                            </label>\r\n                            <div className=\"Searchbar__btn Searchbar__btn--map\" onClick={() => this.onClick()}>\r\n                                    <svg className=\"Searchbar__icon Searchbar__icon--map\" dangerouslySetInnerHTML={{__html: utils.use('map-pin')}} />\r\n                                    <span className=\"Searchbar__title\">{this.props.searchLocation}</span>\r\n                            </div>\r\n                            \r\n                            <button className=\"Searchbar__btn\" type=\"submit\">\r\n                                <svg className=\"Searchbar__icon\" dangerouslySetInnerHTML={{__html: utils.use('search')}} />\r\n                            </button>\r\n                            <Dropdown class={dropClass.join(' ')}>\r\n                                <p className=\"Dropdown__heading\">Search in:</p>\r\n                                <ul className=\"Dropdown__wrap\">\r\n                                    {locations}\r\n                                </ul>\r\n                            </Dropdown>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchLocation: state.localization.searchLocation,\r\n        search: state.data.search\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangeSearchLoc: (loc) => dispatch(actions.changeSearchLoc(loc)),\r\n        onChangeSearchInput: (search) => dispatch(actions.changeSearchInput(search))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Searchbar);","E:\\dec-exp\\src\\hoc\\asyncComponent\\asyncComponent.js",[],"E:\\dec-exp\\src\\components\\Authorization\\AuthSignup.js",[],"E:\\dec-exp\\src\\components\\Authorization\\AuthSignin.js",["150"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport Language from '../Language/Language';\r\n\r\nimport Logo from '../Logo/Logo';\r\n\r\nimport './Authorization.scss';\r\nimport sprite from '../../assets/icons/sprite.svg';\r\n\r\nconst use = (svg) => `<use xlink:href=\"${sprite}#${svg}\"></use>`;\r\n\r\nclass AuthSignin extends Component {\r\n    state = {\r\n        inputFocused: false\r\n    }\r\n\r\n    onFocus = () => this.setState({ inputFocused: true });\r\n    onBlur = () => this.setState({ inputFocused: false });\r\n\r\n    render() {\r\n        const wrapClass = ['Authorization__wrapper'];\r\n        if (this.state.inputFocused) wrapClass.push('Authorization__wrapper--animate');\r\n\r\n        return (\r\n            <div className=\"Authorization\">\r\n                {this.state.inputFocused && <Backdrop z={1} click={this.onBlur} />}\r\n                <Language class=\"Authorization__lang\" dropClass=\"Dropdown--left-fix\"/>\r\n                <div className={wrapClass.join(' ')} onClick={() => this.onFocus()}>\r\n                    <div className=\"Authorization__head\">\r\n                        <Logo />\r\n                        <Link to=\"/signup\" className=\"Authorization__info Authorization__info--heading\">\r\n                            <svg className=\"Authorization__icon\" dangerouslySetInnerHTML={{__html: use('user-plus')}} />\r\n                            Sign up\r\n                        </Link>\r\n                    </div>\r\n                    <form className=\"Authorization__form\">\r\n                    <input \r\n                        className=\"Authorization__input input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your phone number\" />\r\n                    <input \r\n                        className=\"Authorization__input input\" \r\n                        type=\"password\" \r\n                        placeholder=\"Enter your password\" />\r\n                        <div className=\"Authorization__item\">\r\n                            <input type=\"checkbox\" id=\"remember\" className=\"checkbox\" />\r\n                            <label htmlFor=\"remember\" className=\"label\">\r\n                                <span></span>\r\n                                Stay logged in\r\n                            </label>\r\n                        </div>\r\n                    <button className=\"btn btn__primary Authorization__btn\">Sign in</button>\r\n                    <Link to=\"/password-reset\" className=\"Authorization__info\">Reset password</Link>\r\n                    <p className=\"Authorization__info\">Do not have an account? <Link to=\"/signup\" className=\"Authorization__info--high\">Sign up</Link></p>\r\n                </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AuthSignin;","E:\\dec-exp\\src\\components\\Dropdown\\Dropdown.js",[],"E:\\dec-exp\\src\\components\\Authorization\\ResetPass.js",[],"E:\\dec-exp\\src\\components\\Filter\\Filter.js",["151","152","153"],"E:\\dec-exp\\src\\store\\reducers\\reducer_data.js",[],"E:\\dec-exp\\src\\store\\Filters\\for_kids.js",[],"E:\\dec-exp\\src\\store\\Categories\\categories.js",[],"E:\\dec-exp\\src\\store\\actions\\actions_location.js",[],"E:\\dec-exp\\src\\store\\reducers\\reducer__filter.js",[],"E:\\dec-exp\\src\\store\\actions\\actions_filter.js",[],"E:\\dec-exp\\src\\store\\actions\\actions_data.js",[],"E:\\dec-exp\\src\\utilities\\utilities.js",[],"E:\\dec-exp\\src\\components\\Tooltip\\Tooltip.js",[],"E:\\dec-exp\\src\\containers\\Adview\\Adview.js",["154"],"import React, { Component, PureComponent } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport { SwiperSlide, Swiper } from 'swiper/react';\r\nimport SwiperCore, { Scrollbar, Mousewheel, Pagination, Navigation } from 'swiper';\r\n\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport * as utils from '../../utilities/utilities';\r\n\r\nimport avatar from '../../assets/images/32.jpg';\r\nimport './Adview.scss';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport Tooltip from '../../components/Tooltip/Tooltip';\r\n\r\nSwiperCore.use([Scrollbar, Mousewheel, Pagination, Navigation]);\r\n\r\nclass Adview extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            index: null\r\n        }\r\n        this.categoryPath = `${this.props.match.params.category}/${this.props.match.params.subcategory}`;\r\n        this.id = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Initial id: ' + this.state.id);\r\n        const index = this.props.data.findIndex(el => el.id === this.id);\r\n        if (index === -1) {\r\n            console.log('No such ad exists');\r\n        } else this.setState({ index }, () => console.log('Find index by id: ' + this.state.index));\r\n    }\r\n    \r\n    shouldComponentUpdate(prevProps, prevState) {\r\n        return prevState.index !== this.state.index;\r\n    }\r\n\r\n    closePopup = () => {\r\n        this.props.history.replace('/' + this.categoryPath);\r\n    }\r\n    \r\n    onClickNext = () => {\r\n        // console.log('Length: ' + this.props.data.length);\r\n\r\n        // console.log('Index before setting state: ' + this.state.index);\r\n        \r\n        if (this.state.index < this.props.data.length - 1) {\r\n            this.setState(prevState => {\r\n                return { index: prevState.index + 1 }\r\n            }, () => {\r\n                // console.log('Index after setting state: ' + this.state.index);\r\n                this.props.history.replace(`/${this.categoryPath}/${this.props.data[this.state.index].id}`)\r\n            });\r\n        }\r\n        else this.props.history.replace(`/${this.categoryPath}`);\r\n    }\r\n    \r\n    onClickPrev = () => {\r\n        if (this.state.index > 0) {\r\n            this.setState(prevState => {\r\n                return { index: prevState.index - 1 }\r\n            }, () => {\r\n                this.props.history.replace(`/${this.props.match.params.category}/${this.props.match.params.subcategory}/${this.props.data[this.state.index].id}`)\r\n            });\r\n        }\r\n        else this.props.history.replace(`/${this.categoryPath}`);\r\n    }\r\n\r\n    render() {\r\n        const category = `/${this.props.match.params.category}`;\r\n        const subcategory = this.props.match.params.subcategory;\r\n        \r\n        const ad = this.props.data[this.state.index];\r\n        if (!ad) return null;\r\n\r\n        let error = null;\r\n        const images = ad.img.map((el, i) => (\r\n            <SwiperSlide className=\"Adview__figmain\" key={i}>\r\n                <img src={el} className=\"Adview__img\" alt={el} />\r\n            </SwiperSlide>\r\n        ));    \r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <header className=\"Adview\">\r\n                    <Backdrop click={this.closePopup} z={14}/>\r\n                    <Swiper \r\n                        className=\"Adview__wrapper\"\r\n                        direction=\"vertical\"\r\n                        slidesPerView=\"auto\"\r\n                        freeMode\r\n                        scrollbar={{ el: '.swiper-scrollbar', draggable: true }}\r\n                        mousewheel\r\n                        simulateTouch={false}\r\n                        keyboard={{ enabled: true, onlyInViewport: true }}>\r\n                        <SwiperSlide className=\"Adview__content\">\r\n                            <div className=\"Adview__head\">\r\n                                <div className=\"Adview__group\">\r\n                                    <Link to=\"/\" className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey Adview__btn--routes DTool pos-rel wh-auto\">Home</Link>\r\n                                    <Link to={category} className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey Adview__btn--routes DTool pos-rel wh-auto\">{utils.capitalize(utils.parseUrl(utils.formatRouteString(category)))}</Link>\r\n                                    <Link to={`${category}/${subcategory}`} className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey Adview__btn--routes DTool pos-rel wh-auto\">{utils.capitalize(utils.parseUrl(utils.formatRouteString(subcategory)))}</Link>\r\n                                    <span className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey Adview__btn--routes DTool pos-rel wh-auto\">{ad.title}{error}</span>\r\n                                </div>\r\n                                <div className=\"Adview__group\">\r\n                                    <button className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey DTool pos-rel DTool DTool--bottom\" onClick={() => this.onClickPrev()}>\r\n                                        <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('chevron-left')}} />\r\n                                        <Tooltip>Previous Ad</Tooltip>\r\n                                    </button>\r\n                                    <button className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey DTool pos-rel DTool DTool--bottom\" onClick={() => this.onClickNext()}>\r\n                                        <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('chevron-right')}} />\r\n                                        <Tooltip>Next Ad</Tooltip>\r\n                                    </button>\r\n                                    <button className=\"Adview__btn Adview__btn--rel Adview__btn--bggrey DTool pos-rel DTool DTool--bottom\" onClick={() => this.closePopup()}>\r\n                                        <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('x')}} />\r\n                                        <Tooltip>Close</Tooltip>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"Adview__main\">\r\n                                <div className=\"Adview__left\">\r\n                                    <Swiper \r\n                                        className=\"Adview__swiper\"\r\n                                        slidesPerView={1}\r\n                                        navigation={{nextEl: '.Adview__btn-abs--right', prevEl: '.Adview__btn-abs--left', disabledClass: 'Adview__btn--disabled'}}\r\n                                        pagination={{ el: '.swiper_pagination' }}\r\n                                        simulateTouch={false}>\r\n                                        {images}\r\n                                        <button className=\"Adview__btn Adview__btn--abs Adview__btn--left\">\r\n                                            <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('chevron-left')}} />\r\n                                        </button>\r\n                                        <button className=\"Adview__btn Adview__btn--abs Adview__btn--right\">\r\n                                            <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('chevron-right')}} />\r\n                                        </button>\r\n                                        <button className=\"Adview__btn Adview__btn--abs Adview__btn--corner DTool\">\r\n                                            <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('maximize')}} />\r\n                                            <Tooltip>Full Screen</Tooltip>\r\n                                        </button>\r\n                                        <div className=\"swiper-pagination\"></div>\r\n                                    </Swiper>\r\n                                    <div className=\"Adview__details mb-2\">\r\n                                        <div className=\"Adview__group Adview__group--sb\">\r\n                                            <div className=\"Adview__headingwrap\">\r\n                                                <h1 className=\"heading heading__1 Adview__heading\" data-premium={ad.premium}>\r\n                                                    {ad.title}\r\n                                                    {/* <span className=\"badge__bull\">&nbsp;&bull;&nbsp;</span> */}\r\n                                                    <span className=\"badge ml-1\">\r\n                                                        Promoted\r\n                                                    </span>\r\n                                                </h1>\r\n                                            </div>\r\n                                            <div className=\"Adview__group\">\r\n                                                <button className=\"Adview__btn Adview__btn--rel DTool pos-rel\">\r\n                                                    <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('share')}} />\r\n                                                    <Tooltip>Share</Tooltip>\r\n                                                </button>\r\n                                                <button className=\"Adview__btn Adview__btn--rel DTool pos-rel\">\r\n                                                    <svg className=\"Adview__icon\" dangerouslySetInnerHTML={{__html: utils.use('heart')}} />\r\n                                                    <Tooltip>Add to favourites</Tooltip>\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"Adview__description\">\r\n                                            <div className=\"Adview__subheading mb-1\">\r\n                                                <p className=\"Adview__item Adview__item--location\">{ad.location}</p>\r\n                                            </div>\r\n                                            <div>\r\n                                                <p className=\"btn btn__primary Adview__item Adview__item--price\">{ad.price}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* <div className=\"Adsview__details\" style={{height: '20rem'}}></div> */}\r\n                                </div>\r\n                                <div className=\"Adview__right\">\r\n                                    <figure className=\"Adview__figure Adview__item\">\r\n                                        <img className=\"Adview__img\" src={avatar} alt={ad.id} />\r\n                                    </figure>\r\n                                    <span className=\"Adview__item Adview__item--name\">John Doe</span>\r\n                                    <span className=\"Adview__item\">Comapny</span>\r\n                                    <span className=\"Adview__item\">Rating</span>\r\n                                    <button className=\"Adview__btn--main Adview__item btn btn__primary\">\r\n                                        Phone number\r\n                                        <svg className=\"Adview__icon ml-5\" dangerouslySetInnerHTML={{__html: utils.use('phone-outgoing')}} />\r\n                                    </button>\r\n                                    <button className=\"Adview__btn--main Adview__item btn btn__primary btn__primary--green\">\r\n                                        Write a message\r\n                                        <svg className=\"Adview__icon ml-5\" dangerouslySetInnerHTML={{__html: utils.use('edit-2')}} />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </SwiperSlide>\r\n                        <div className=\"swiper-scrollbar\"></div>\r\n                    </Swiper>\r\n                </header>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Adview);\r\n\r\n\r\n// var rgb = getAverageRGB(document.getElementById('i'));\r\n// document.body.style.backgroundColor = 'rgb('+rgb.r+','+rgb.g+','+rgb.b+')';\r\n\r\n// function getAverageRGB(imgEl) {\r\n\r\n// var blockSize = 5, // only visit every 5 pixels\r\n//     defaultRGB = {r:0,g:0,b:0}, // for non-supporting envs\r\n//     canvas = document.createElement('canvas'),\r\n//     context = canvas.getContext && canvas.getContext('2d'),\r\n//     data, width, height,\r\n//     i = -4,\r\n//     length,\r\n//     rgb = {r:0,g:0,b:0},\r\n//     count = 0;\r\n    \r\n// if (!context) {\r\n//     return defaultRGB;\r\n// }\r\n\r\n// height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;\r\n// width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;\r\n\r\n// context.drawImage(imgEl, 0, 0);\r\n\r\n// try {\r\n//     data = context.getImageData(0, 0, width, height);\r\n// } catch(e) {\r\n//     /* security error, img on diff domain */alert('x');\r\n//     return defaultRGB;\r\n// }\r\n\r\n// length = data.data.length;\r\n\r\n// while ( (i += blockSize * 4) < length ) {\r\n//     ++count;\r\n//     rgb.r += data.data[i];\r\n//     rgb.g += data.data[i+1];\r\n//     rgb.b += data.data[i+2];\r\n// }\r\n\r\n// // ~~ used to floor values\r\n// rgb.r = ~~(rgb.r/count);\r\n// rgb.g = ~~(rgb.g/count);\r\n// rgb.b = ~~(rgb.b/count);\r\n\r\n// return rgb;\r\n\r\n// }\r\n\r\n// import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import Rating from '@material-ui/lab/Rating';\r\n// import StarBorderIcon from '@material-ui/icons/StarBorder';\r\n// import FavoriteIcon from '@material-ui/icons/Favorite';\r\n// import SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\n// import SentimentDissatisfiedIcon from '@material-ui/icons/SentimentDissatisfied';\r\n// import SentimentSatisfiedIcon from '@material-ui/icons/SentimentSatisfied';\r\n// import SentimentSatisfiedAltIcon from '@material-ui/icons/SentimentSatisfiedAltOutlined';\r\n// import SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import Box from '@material-ui/core/Box';\r\n\r\n// const StyledRating = withStyles({\r\n//   iconFilled: {\r\n//     color: '#ff6d75',\r\n//   },\r\n//   iconHover: {\r\n//     color: '#ff3d47',\r\n//   },\r\n// })(Rating);\r\n\r\n// const customIcons = {\r\n//   1: {\r\n//     icon: <SentimentVeryDissatisfiedIcon />,\r\n//     label: 'Very Dissatisfied',\r\n//   },\r\n//   2: {\r\n//     icon: <SentimentDissatisfiedIcon />,\r\n//     label: 'Dissatisfied',\r\n//   },\r\n//   3: {\r\n//     icon: <SentimentSatisfiedIcon />,\r\n//     label: 'Neutral',\r\n//   },\r\n//   4: {\r\n//     icon: <SentimentSatisfiedAltIcon />,\r\n//     label: 'Satisfied',\r\n//   },\r\n//   5: {\r\n//     icon: <SentimentVerySatisfiedIcon />,\r\n//     label: 'Very Satisfied',\r\n//   },\r\n// };\r\n\r\n// function IconContainer(props) {\r\n//   const { value, ...other } = props;\r\n//   return <span {...other}>{customIcons[value].icon}</span>;\r\n// }\r\n\r\n// IconContainer.propTypes = {\r\n//   value: PropTypes.number.isRequired,\r\n// };\r\n\r\n// export default function CustomizedRatings() {\r\n//   return (\r\n//     <div>\r\n//       <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n//         <Typography component=\"legend\">Custom empty icon</Typography>\r\n//         <Rating\r\n//           name=\"customized-empty\"\r\n//           defaultValue={2}\r\n//           precision={0.5}\r\n//           emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\r\n//         />\r\n//       </Box>\r\n//       <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n//         <Typography component=\"legend\">Custom icon and color</Typography>\r\n//         <StyledRating\r\n//           name=\"customized-color\"\r\n//           defaultValue={2}\r\n//           getLabelText={(value) => `${value} Heart${value !== 1 ? 's' : ''}`}\r\n//           precision={0.5}\r\n//           icon={<FavoriteIcon fontSize=\"inherit\" />}\r\n//         />\r\n//       </Box>\r\n//       <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n//         <Typography component=\"legend\">10 stars</Typography>\r\n//         <Rating name=\"customized-10\" defaultValue={2} max={10} />\r\n//       </Box>\r\n//       <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n//         <Typography component=\"legend\">Custom icon set</Typography>\r\n//         <Rating\r\n//           name=\"customized-icons\"\r\n//           defaultValue={2}\r\n//           getLabelText={(value) => customIcons[value].label}\r\n//           IconContainerComponent={IconContainer}\r\n//         />\r\n//       </Box>\r\n//     </div>\r\n//   );\r\n// }\r\n","E:\\dec-exp\\src\\containers\\Main\\Main.js",[],{"ruleId":"155","severity":1,"message":"156","line":5,"column":25,"nodeType":"157","messageId":"158","endLine":5,"endColumn":35},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":54,"column":25,"nodeType":"165","endLine":54,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":59,"column":25,"nodeType":"165","endLine":59,"endColumn":88},{"ruleId":"163","severity":1,"message":"164","line":70,"column":25,"nodeType":"165","endLine":70,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":78,"column":25,"nodeType":"165","endLine":78,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":84,"column":25,"nodeType":"165","endLine":84,"endColumn":64},{"ruleId":"166","severity":1,"message":"167","line":34,"column":21,"nodeType":"165","endLine":34,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":18,"column":17,"nodeType":"165","endLine":18,"endColumn":54},{"ruleId":"155","severity":1,"message":"168","line":3,"column":8,"nodeType":"157","messageId":"158","endLine":3,"endColumn":16},{"ruleId":"155","severity":1,"message":"169","line":9,"column":8,"nodeType":"157","messageId":"158","endLine":9,"endColumn":14},{"ruleId":"155","severity":1,"message":"170","line":3,"column":10,"nodeType":"157","messageId":"158","endLine":3,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":174,"column":37,"nodeType":"165","endLine":174,"endColumn":74},{"ruleId":"163","severity":1,"message":"164","line":177,"column":37,"nodeType":"165","endLine":177,"endColumn":74},{"ruleId":"163","severity":1,"message":"164","line":180,"column":37,"nodeType":"165","endLine":180,"endColumn":74},{"ruleId":"155","severity":1,"message":"171","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":26},"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["172"],"no-negated-in-lhs",["173"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Dropdown' is defined but never used.","'sprite' is defined but never used.","'LazyLoadComponent' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]